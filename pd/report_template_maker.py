import sys
import os
from urllib.parse import urlparse



def main(user_input: list = None):
    user_inputs = sys.argv[1:]
    print(f"Input: {user_inputs}")

    if user_inputs_are_valid(user_inputs):
        report_file_directory = user_inputs[0]
        remote_repo_url = user_inputs[1]

        commit_number = 1
        if len(user_inputs) == 3:
            commit_number = int(user_inputs[2])

        out_file = open("result.md", "w")


        report_file = open(report_file_directory, 'r')

        in_the_middle_of_the_msg = False

        for line in report_file:

            if line.startswith("hash: "):
                out_file.write("## Commit #"+str(commit_number)+"\n")
                commit_number+=1
                out_file.write("### Hash"+"\n")

                hash = line.split("hash: ")[1].strip()
                commit_url = remote_repo_url+"commit/"+hash

                out_file.write("[" + hash +"]" + "(" + commit_url + ")"+"\n")
                out_file.write("\n")

            if line.startswith("message: "):
                out_file.write("### Message"+"\n")
                msg = line.split("message: ")[1]
                out_file.write(msg)
                in_the_middle_of_the_msg = True
                continue

            if line.startswith("modified file(s): "):
                in_the_middle_of_the_msg = False
                out_file.write("### Antipattern Category\n")
                out_file.write("\n")

            if in_the_middle_of_the_msg:
                out_file.write(line)
            
            if line.startswith("First found keyword: "):
                out_file.write("### Keyword"+"\n")

                keyword = line.split("First found keyword: ")[1]
                out_file.write(keyword)

                out_file.write("### Note"+"\n")
                out_file.write("\n")
                out_file.write("\n")

            





        out_file.close()
            


    else:
        print_help()

def user_inputs_are_valid(user_inputs):
    if len(user_inputs) < 2:
        print("! Missing input argument(s)")
        return False
    
    if len(user_inputs) > 3:
        print("! Too many input arguments")
        return False
    
    report_file_directory = user_inputs[0]

    if not os.path.isfile(report_file_directory):
        print("! Report file does not exist")
        return False

    remote_repo_url = user_inputs[1]

    if not is_url(remote_repo_url):
        print("! Second parameter should be a valid URL")
        return False

    if len(user_inputs) == 3 and not user_inputs[2].isnumeric():
        print("! The second parameter should be a positive integer")
        return False

    return True




def is_url(url):
  try:
    result = urlparse(url)
    return all([result.scheme, result.netloc])
  except ValueError:
    return False


    



def print_help():
    """
    Print help text for wrong user input.
    """
    print("Expected: at least two input arguments:")
    print("arg 1) report file generated by mining process")
    print("arg 2) remote repository address")
    print("arg 3) Starting commit number (default: 1)")


if __name__ == "__main__":
    main()
